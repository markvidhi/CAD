import csv
import random

# load irist dataset and randomly split it into test set and training set

def loadDataset(filename, split, trainingSet=[] , testSet=[]):
        with open(filename, 'r') as csvfile:
            lines = csv.reader(csvfile)
            dataset = list(lines)
            for x in range(len(dataset)-1):
                for y in range(30):
                    dataset[x][y] = float(dataset[x][y])
                if random.random() < split:
                    trainingSet.append(dataset[x])
                else:
                    testSet.append(dataset[x])


#############################
# SIMILARITY CHECK FUNCTION #
#############################

# euclidean distance calcualtion

import math
def euclideanDistance(instance1, instance2, length):
        distance = 0
        for x in range(length):
                distance += pow(float(instance1[x]) - float(instance2[x]), 2)
        return math.sqrt(distance)



############################################################
# NEIGHBOURS - selecting subset with the smallest distance #
############################################################

import operator 
def getNeighbors(trainingSet, testInstance, k):
        distances = []
        length = len(testInstance)-1
        for x in range(len(trainingSet)):
                dist = euclideanDistance(testInstance, trainingSet[x], length)
                distances.append((trainingSet[x], dist))
                
        distances.sort(key=operator.itemgetter(1))
        neighbors = []
        for x in range(k):
                neighbors.append(distances[x][0])
        return neighbors



######################
# PREDICTED RESPONSE #
######################

import operator
def getResponse(neighbors):
        classVotes = {}
        for x in range(len(neighbors)):
                response = neighbors[x][-2]
                if response in classVotes:
                        classVotes[response] += 1
                else:
                        classVotes[response] = 1
        sortedVotes = sorted(classVotes.items(), key=operator.itemgetter(1), reverse=True)
        return sortedVotes[0][0]



######################
# MEASURING ACCURACY #
######################

def getAccuracy(testSet, predictions):
        correct = 0
        #print(type(predictions[0]))
        for x in range(len(testSet)):
                #print (type(testSet[x][-2]))
                if (testSet[x][-2] == predictions[x]): 
                        correct = correct + 1
                        #print (correct)
                        
        return (correct/float(len(testSet))*100) 

def main():
        # prepare data
        trainingSet=[]
        testSet=[]
        split = 0.80
        loadDataset('hypernew.data', split, trainingSet, testSet)
        print ("Train set: {}".format(len(trainingSet)))
        print ("Test set: {}".format(len(testSet)))
        # generate predictions
        predictions=[]
        k = 3
        for x in range(len(testSet)):
                neighbors = getNeighbors(trainingSet, testSet[x], k)
                #print(neighbors)
                result = getResponse(neighbors)
                predictions.append(result)
                #print('> predicted=' + repr(result) + ', actual=' + repr(float(testSet[x][-2])))
        accuracy = getAccuracy(testSet, predictions)
        print('Accuracy: ' + repr(accuracy) + '%')
        
main()
